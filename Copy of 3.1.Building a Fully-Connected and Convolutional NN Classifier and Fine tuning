{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1rIjLg7oibs-fSwHU8An3YSynQl1W5E2x","timestamp":1708090025519},{"file_id":"1xbsY4IcsxLiqtoELeMzVn9LIWZHwDNLI","timestamp":1638790984456},{"file_id":"1Q9fUTxtItK6sYaHsB6Azgs7s9OA4UcWe","timestamp":1635428812237},{"file_id":"1DJS3FshQ6tmCOXMnhTrQtnm1PCiaBMYE","timestamp":1635362661025},{"file_id":"1nseete5huZlWM7Ak0qL-T75Dbk0mdr-Z","timestamp":1634976489995}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"rX8mhOLljYeM"},"source":["<p align=\"center\">\n","  <a href=\"url\"><img src=\"https://raw.githubusercontent.com/mymehio/test/master/ml4co-final.png\" align=\"middle\" height=\"350\" width=\"600\" ></a>\n","</p>\n","\n","#An Image Classifier using Fully-Connected and Convolutional Neural Networks\n","\n","\n","In this project, you will train a **fully-connected neural network** to perform image classification on dandelions and grass plants, and you will do the same task bu this time using a **convolutional neural network**, and then compare between their performances.\n","You will be using TensorFlow/Keras to build these models training/validation dataset.\n","\n","First, let's download the training and validation data:"]},{"cell_type":"markdown","metadata":{"id":"OPThEjGg0jUw"},"source":["### Preparing the Datasets"]},{"cell_type":"markdown","metadata":{"id":"doPzVLV9yegq"},"source":[]},{"cell_type":"code","metadata":{"id":"RXZT2UsyIVe_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1708016549527,"user_tz":-60,"elapsed":616,"user":{"displayName":"Yasser Almehio","userId":"17884573495595278135"}},"outputId":"9ebd8ccb-b979-4cb5-b1d9-0c290776c9df"},"source":["!wget --no-check-certificate \\\n","    https://github.com/mymehio/test/blob/master/train.zip?raw=true \\\n","    -O /tmp/train.zip"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--2024-02-15 17:02:28--  https://github.com/mymehio/test/blob/master/train.zip?raw=true\n","Resolving github.com (github.com)... 192.30.255.113\n","Connecting to github.com (github.com)|192.30.255.113|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://github.com/mymehio/test/raw/master/train.zip [following]\n","--2024-02-15 17:02:28--  https://github.com/mymehio/test/raw/master/train.zip\n","Reusing existing connection to github.com:443.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://raw.githubusercontent.com/mymehio/test/master/train.zip [following]\n","--2024-02-15 17:02:28--  https://raw.githubusercontent.com/mymehio/test/master/train.zip\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 12649816 (12M) [application/zip]\n","Saving to: ‘/tmp/train.zip’\n","\n","/tmp/train.zip      100%[===================>]  12.06M  --.-KB/s    in 0.08s   \n","\n","2024-02-15 17:02:29 (157 MB/s) - ‘/tmp/train.zip’ saved [12649816/12649816]\n","\n"]}]},{"cell_type":"code","metadata":{"id":"0mLij6qde6Ox","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1708016550834,"user_tz":-60,"elapsed":677,"user":{"displayName":"Yasser Almehio","userId":"17884573495595278135"}},"outputId":"0299f522-46c5-469d-897e-5e3a9665b369"},"source":["!wget --no-check-certificate \\\n","    https://github.com/mymehio/test/blob/master/valid.zip?raw=true \\\n","    -O /tmp/valid.zip"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--2024-02-15 17:02:29--  https://github.com/mymehio/test/blob/master/valid.zip?raw=true\n","Resolving github.com (github.com)... 192.30.255.112\n","Connecting to github.com (github.com)|192.30.255.112|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://github.com/mymehio/test/raw/master/valid.zip [following]\n","--2024-02-15 17:02:29--  https://github.com/mymehio/test/raw/master/valid.zip\n","Reusing existing connection to github.com:443.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://raw.githubusercontent.com/mymehio/test/master/valid.zip [following]\n","--2024-02-15 17:02:30--  https://raw.githubusercontent.com/mymehio/test/master/valid.zip\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 4853088 (4.6M) [application/zip]\n","Saving to: ‘/tmp/valid.zip’\n","\n","/tmp/valid.zip      100%[===================>]   4.63M  --.-KB/s    in 0.05s   \n","\n","2024-02-15 17:02:30 (93.5 MB/s) - ‘/tmp/valid.zip’ saved [4853088/4853088]\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"9brUxyTpYZHy"},"source":["The following python code will use the OS library to use Operating System libraries, giving you access to the file system, and the zipfile library allowing you to unzip the data."]},{"cell_type":"code","metadata":{"id":"PLy3pthUS0D2"},"source":["import os\n","import zipfile\n","\n","local_zip = '/tmp/train.zip'\n","zip_ref = zipfile.ZipFile(local_zip, 'r')\n","zip_ref.extractall('/tmp')\n","local_zip = '/tmp/valid.zip'\n","\n","zip_ref = zipfile.ZipFile(local_zip, 'r')\n","zip_ref.extractall('/tmp')\n","zip_ref.close()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"o-qUPyfO7Qr8"},"source":["The contents of the .zip are extracted to the directory `/tmp/train`, which in turn each contain `dandelion` and `grass` subdirectories.\n","\n","### If the data is so small ==> Data Augmentation\n","\n","What you'll see later on is that you will use the [ImageGenerator](https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/ImageDataGenerator) class to automatically make our dataset ready from this train directory, using the subdirectories for classes.\n","\n","Let's define each of these subdirectories:"]},{"cell_type":"code","metadata":{"id":"NR_M9nWN-K8B"},"source":["# Directory with our training dandelion pictures\n","train_dandelion_dir = os.path.join('/tmp/train/dandelion')\n","\n","# Directory with our training grass pictures\n","train_grass_dir = os.path.join('/tmp/train/grass')\n","\n","# Directory with our validation dandelion pictures\n","valid_dandelion_dir = os.path.join('/tmp/valid/dandelion')\n","\n","# Directory with our validation grass pictures\n","valid_grass_dir = os.path.join('/tmp/train/grass')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LuBYtA_Zd8_T"},"source":["Now, let's see what the filenames look like in the `dandelion` and `grass` training directories:"]},{"cell_type":"code","metadata":{"id":"4PIP1rkmeAYS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1708016556844,"user_tz":-60,"elapsed":285,"user":{"displayName":"Yasser Almehio","userId":"17884573495595278135"}},"outputId":"3102d866-c08b-4dc1-b80b-ad6f15cc8d46"},"source":["train_dandelion_names = os.listdir(train_dandelion_dir)\n","print(train_dandelion_names[:10])\n","\n","train_grass_names = os.listdir(train_grass_dir)\n","print(train_grass_names[:10])\n","\n","validation_dandelion_hames = os.listdir(valid_dandelion_dir)\n","print(validation_dandelion_hames[:10])\n","\n","validation_grass_names = os.listdir(valid_grass_dir)\n","print(validation_grass_names[:10])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['00000442.jpg', '00000024.jpg', '00000251.jpg', '00000400.jpg', '00000410.jpg', '00000120.jpg', '00000390.jpg', '00000391.jpg', '00000198.jpg', '00000247.jpg']\n","['00000442.jpg', '00000024.jpg', '00000251.jpg', '00000400.jpg', '00000410.jpg', '00000120.jpg', '00000390.jpg', '00000391.jpg', '00000198.jpg', '00000247.jpg']\n","['00000024.jpg', '00000058.jpg', '00000021.jpg', '00000052.jpg', '00000034.jpg', '00000010.jpg', '00000072.jpg', '00000055.jpg', '00000008.jpg', '00000064.jpg']\n","['00000442.jpg', '00000024.jpg', '00000251.jpg', '00000400.jpg', '00000410.jpg', '00000120.jpg', '00000390.jpg', '00000391.jpg', '00000198.jpg', '00000247.jpg']\n"]}]},{"cell_type":"markdown","metadata":{"id":"HlqN5KbafhLI"},"source":["Let's find out the total number of dandelion and grass images in the directories:"]},{"cell_type":"code","metadata":{"id":"H4XHh2xSfgie","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1708016561102,"user_tz":-60,"elapsed":283,"user":{"displayName":"Yasser Almehio","userId":"17884573495595278135"}},"outputId":"9cab5acc-efd6-4620-c41c-e80b9ee4a3f6"},"source":["print('total training dandelion images:', len(os.listdir(train_dandelion_dir)))\n","print('total training grass images:', len(os.listdir(train_grass_dir)))\n","print('total validation dandelion images:', len(os.listdir(valid_dandelion_dir)))\n","print('total validation grass images:', len(os.listdir(valid_grass_dir)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["total training dandelion images: 500\n","total training grass images: 499\n","total validation dandelion images: 92\n","total validation grass images: 499\n"]}]},{"cell_type":"markdown","metadata":{"id":"C3WZABE9eX-8"},"source":["Now let's take a look at a few pictures to get a better sense of what they look like. First, configure the matplot parameters:"]},{"cell_type":"code","metadata":{"id":"b2_Q0-_5UAv-"},"source":["\n","%matplotlib inline\n","\n","import matplotlib.pyplot as plt\n","import matplotlib.image as mpimg\n","\n","# Parameters for our graph; we'll output images in a 4x4 configuration\n","nrows = 4\n","ncols = 4\n","\n","# Index for iterating over images\n","pic_index = 0"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xTvHzGCxXkqp"},"source":["**Exercise:**\n","\n","Display a batch of 8 dandelion and 8 grass images, and their corresponding class names.\n","Try to complete the cell to get the code running\n","\n","\n","You can rerun the cell to see a fresh batch each time:"]},{"cell_type":"code","metadata":{"id":"Wpr8GxjOU8in","colab":{"base_uri":"https://localhost:8080/","height":130},"executionInfo":{"status":"error","timestamp":1670576682828,"user_tz":-60,"elapsed":280,"user":{"displayName":"alexis drugeon","userId":"05486998580034225509"}},"outputId":"ea339031-ca1b-42d7-a423-f283f6ec2688"},"source":["# Set up matplotlib fig, and size it to fit 4x4 pics\n","fig = plt.gcf()\n","fig.set_size_inches(ncols * 4, nrows * 4)\n","\n","pic_index += 8\n","next_dandelion_pic = [os.path.join(train_dandelion_dir, fname)\n","                for fname in train_dandelion_names[pic_index-8:pic_index]]\n","next_grass_pic = [os.path.join(train_grass_dir, fname)\n","                for fname in train_grass_names[pic_index-8:pic_index]]\n","\n","for i, img_path in enumerate(next_dandelion_pic + next_grass_pic):\n","  # Set up subplot; subplot indices start at 1\n","  sp = plt.subplot(nrows, ncols, i + 1)\n","  sp.axis('Off') # Don't show axes (or gridlines)\n","\n","  img = mpimg.imread(?) # here read the image from the path\n","  plt.?   # here dispaly the read image\n","  plt.title(os.path.basename(os.path.split(img_path)[?])) # try to extract the name of class from the image path\n","plt.show()\n","\n"],"execution_count":null,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-9-6053e3c3a1aa>\"\u001b[0;36m, line \u001b[0;32m16\u001b[0m\n\u001b[0;31m    img = mpimg.imread(?) # here read the image from the path\u001b[0m\n\u001b[0m                       ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"markdown","metadata":{"id":"Sn9m9D3UimHM"},"source":["#### Data Preprocessing\n","\n","Now, let's use `keras.preprocessing.image.ImageDataGenerator` class to create our train and validation dataset and normalize our data.\n","\n","- It's important to normalize our data because data going into neural network to improve its overall performance.\n","- We will use the `rescale` parameter to scale our image pixel values from [0, 255] to [0,1].\n","\n","- In each generator, we specify the source directory of our images, the classes, the input image size, the batch size (how many images to process at once), and class mode."]},{"cell_type":"code","metadata":{"id":"6YI-I9hkGWrL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1708016585387,"user_tz":-60,"elapsed":3301,"user":{"displayName":"Yasser Almehio","userId":"17884573495595278135"}},"outputId":"c43cafac-3f95-4ae3-be73-1830ed0bad45"},"source":["from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","# All images will be rescaled by 1./255\n","train_datagen = ImageDataGenerator(rescale=1/255)\n","validation_datagen = ImageDataGenerator(rescale=1/255)\n","\n","# Flow training images in batches of 120 using train_datagen generator\n","train_generator = train_datagen.flow_from_directory(\n","        '/tmp/train/',  # This is the source directory for training images\n","        classes = ['dandelion', 'grass'],\n","        target_size=(200, 200),  # All images will be resized to 200x200\n","        batch_size=120,\n","        # Use binary labels\n","        class_mode='binary')\n","\n","# Flow validation images in batches of 19 using valid_datagen generator\n","validation_generator = validation_datagen.flow_from_directory(\n","        '/tmp/valid/',  # This is the source directory for training images\n","        classes = ['dandelion', 'grass'],\n","        target_size=(200, 200),  # All images will be resized to 200x200\n","        batch_size=19,\n","        # Use binary labels\n","        class_mode='binary',\n","        shuffle=False)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 999 images belonging to 2 classes.\n","Found 148 images belonging to 2 classes.\n"]}]},{"cell_type":"markdown","metadata":{"id":"5oqBkNBJmtUv"},"source":["## Building the FC-NN Model from Scratch\n","\n","Step 1 will be to import tensorflow."]},{"cell_type":"code","metadata":{"id":"qvfZg3LQbD-5"},"source":["import tensorflow as tf\n","import numpy as np\n","from itertools import cycle\n","\n","from sklearn import svm, datasets\n","from sklearn.metrics import roc_curve, auc\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import label_binarize\n","from sklearn.multiclass import OneVsRestClassifier\n","from scipy import interp\n","from sklearn.metrics import roc_auc_score"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BnhYCP4tdqjC"},"source":["\n","**Tips:**\n","\n","- First, add the first layer as Flatten layer that flattens the input image (to get 1D image data), which then feeds into the next layer,\n","-  Second layse: Dense layer (or fully-connected layer), with 256 hidden units.\n","- Finally, because our goal is to perform binary classification, our final layer will be a one unit of sigmoid function (activation function)  \n","#### Why sigmoid?\n"," so that the output of our network will be a single scalar between 0 and 1, encoding the probability that the current image is of class 1 (class 1 being grass and class 0 being dandelion)."]},{"cell_type":"code","metadata":{"id":"PixZ2s5QbYQ3","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"error","timestamp":1708016594440,"user_tz":-60,"elapsed":768,"user":{"displayName":"Yasser Almehio","userId":"17884573495595278135"}},"outputId":"676d14c6-f7d0-4ecd-9190-9d7987e2e754"},"source":["modelfc = tf.keras.models.Sequential([tf.keras.layers.Flatten(input_shape = (?,?,3)), # why 3 ?\n","                                    tf.keras.layers.Dense(256, activation=tf.nn.relu),\n","                                    tf.keras.layers.Dense(?, activation=tf.nn.sigmoid)])"],"execution_count":null,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"invalid syntax (<ipython-input-10-f038349ca446>, line 1)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-10-f038349ca446>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    modelfc = tf.keras.models.Sequential([tf.keras.layers.Flatten(input_shape = (?,?,3)), # why 3 ?\u001b[0m\n\u001b[0m                                                                                 ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"markdown","metadata":{"id":"s9EaFDP5srBa"},"source":["The model.summary() method call prints a summary of the NN"]},{"cell_type":"code","metadata":{"id":"7ZKj8392nbgP","colab":{"base_uri":"https://localhost:8080/","height":141},"executionInfo":{"status":"error","timestamp":1708016595276,"user_tz":-60,"elapsed":562,"user":{"displayName":"Yasser Almehio","userId":"17884573495595278135"}},"outputId":"281af668-60f7-44d7-b9bb-a2db26eaad5f"},"source":["modelfc.summary()"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'modelfc' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-7d1bf29e4307>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmodelfc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msummary\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'modelfc' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"PEkKSpZlvJXA"},"source":["Next, we'll configure the specifications for model training. We will train our model with the `binary_crossentropy` loss. We will use the `Adam` optimizer. [Adam](https://wikipedia.org/wiki/Stochastic_gradient_descent#Adam) is a sensible optimization algorithm because it automates learning-rate tuning for us (alternatively, we could also use [RMSProp](https://wikipedia.org/wiki/Stochastic_gradient_descent#RMSProp) or [Adagrad](https://developers.google.com/machine-learning/glossary/#AdaGrad) for similar results). We will add accuracy to `metrics` so that the model will monitor accuracy during training"]},{"cell_type":"code","metadata":{"id":"8DHWhFP_uhq3"},"source":["modelfc.compile(optimizer = tf.optimizers.Adam(),\n","              loss = 'binary_crossentropy',\n","              metrics=['accuracy'])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mu3Jdwkjwax4"},"source":["### Training step (fit) -Fully Connected NN\n","Let's train for 15 epochs.\n","\n","Note that steps_per_epoch was set along with batch_size in ImageDataGenerator so that steps_per_epoch * batch_size = total # of images. For example, for training, 8 * 120 = 960, just under our total of 999 images.\n","\n","Notice that as we train, our validation accuracy never exceeds training accuracy, which is a good thing. Our model won't work better on unseen images than seen images."]},{"cell_type":"code","metadata":{"id":"Fb1_lgobv81m","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1638783094527,"user_tz":-60,"elapsed":103494,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"3ed73017-54a5-4b87-e153-fe318aed2162"},"source":["# history = model.fit(\n","#       train_generator,\n","#       steps_per_epoch=8,\n","#       epochs=15,\n","#       verbose=1,\n","#       validation_data = validation_generator,\n","#       validation_steps=8)\n","\n","history = modelfc.fit(train_generator,\n","      steps_per_epoch=8,\n","      epochs=25,\n","      verbose=1,\n","      validation_data = validation_generator,\n","      validation_steps=8)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/25\n","8/8 [==============================] - 5s 364ms/step - loss: 24.9052 - accuracy: 0.5336 - val_loss: 8.7008 - val_accuracy: 0.6284\n","Epoch 2/25\n","8/8 [==============================] - 3s 324ms/step - loss: 15.7949 - accuracy: 0.5540 - val_loss: 17.7205 - val_accuracy: 0.3851\n","Epoch 3/25\n","8/8 [==============================] - 3s 329ms/step - loss: 11.0231 - accuracy: 0.5688 - val_loss: 9.7720 - val_accuracy: 0.6419\n","Epoch 4/25\n","8/8 [==============================] - 3s 328ms/step - loss: 5.8171 - accuracy: 0.6712 - val_loss: 7.2344 - val_accuracy: 0.5135\n","Epoch 5/25\n","8/8 [==============================] - 3s 328ms/step - loss: 2.8881 - accuracy: 0.7361 - val_loss: 3.1034 - val_accuracy: 0.6689\n","Epoch 6/25\n","8/8 [==============================] - 3s 319ms/step - loss: 3.2813 - accuracy: 0.7042 - val_loss: 7.3150 - val_accuracy: 0.6216\n","Epoch 7/25\n","8/8 [==============================] - 3s 331ms/step - loss: 5.5675 - accuracy: 0.6615 - val_loss: 8.9430 - val_accuracy: 0.4054\n","Epoch 8/25\n","8/8 [==============================] - 3s 327ms/step - loss: 2.6642 - accuracy: 0.7304 - val_loss: 3.4535 - val_accuracy: 0.6216\n","Epoch 9/25\n","8/8 [==============================] - 3s 318ms/step - loss: 1.4052 - accuracy: 0.7964 - val_loss: 2.9340 - val_accuracy: 0.5473\n","Epoch 10/25\n","8/8 [==============================] - 3s 327ms/step - loss: 1.9455 - accuracy: 0.7452 - val_loss: 2.2543 - val_accuracy: 0.6622\n","Epoch 11/25\n","8/8 [==============================] - 3s 320ms/step - loss: 0.8496 - accuracy: 0.8328 - val_loss: 5.2278 - val_accuracy: 0.4595\n","Epoch 12/25\n","8/8 [==============================] - 3s 337ms/step - loss: 2.7866 - accuracy: 0.7042 - val_loss: 4.0851 - val_accuracy: 0.5068\n","Epoch 13/25\n","8/8 [==============================] - 3s 319ms/step - loss: 2.5464 - accuracy: 0.7167 - val_loss: 3.5719 - val_accuracy: 0.5608\n","Epoch 14/25\n","8/8 [==============================] - 3s 321ms/step - loss: 3.0304 - accuracy: 0.6962 - val_loss: 3.9896 - val_accuracy: 0.6216\n","Epoch 15/25\n","8/8 [==============================] - 3s 334ms/step - loss: 4.8029 - accuracy: 0.6439 - val_loss: 4.8394 - val_accuracy: 0.5203\n","Epoch 16/25\n","8/8 [==============================] - 3s 331ms/step - loss: 2.1957 - accuracy: 0.7736 - val_loss: 6.2619 - val_accuracy: 0.4932\n","Epoch 17/25\n","8/8 [==============================] - 3s 330ms/step - loss: 1.1928 - accuracy: 0.8294 - val_loss: 5.0692 - val_accuracy: 0.5135\n","Epoch 18/25\n","8/8 [==============================] - 3s 329ms/step - loss: 0.8138 - accuracy: 0.8487 - val_loss: 5.6548 - val_accuracy: 0.4865\n","Epoch 19/25\n","8/8 [==============================] - 3s 329ms/step - loss: 1.8141 - accuracy: 0.7713 - val_loss: 4.4487 - val_accuracy: 0.5203\n","Epoch 20/25\n","8/8 [==============================] - 3s 323ms/step - loss: 2.0865 - accuracy: 0.7497 - val_loss: 2.7425 - val_accuracy: 0.6689\n","Epoch 21/25\n","8/8 [==============================] - 3s 350ms/step - loss: 2.0822 - accuracy: 0.7634 - val_loss: 2.8495 - val_accuracy: 0.6622\n","Epoch 22/25\n","8/8 [==============================] - 3s 331ms/step - loss: 0.9311 - accuracy: 0.8373 - val_loss: 2.3290 - val_accuracy: 0.6959\n","Epoch 23/25\n","8/8 [==============================] - 3s 327ms/step - loss: 0.9202 - accuracy: 0.8498 - val_loss: 4.0744 - val_accuracy: 0.6014\n","Epoch 24/25\n","8/8 [==============================] - 3s 329ms/step - loss: 5.3563 - accuracy: 0.6325 - val_loss: 2.7042 - val_accuracy: 0.6554\n","Epoch 25/25\n","8/8 [==============================] - 3s 356ms/step - loss: 2.1833 - accuracy: 0.7634 - val_loss: 8.3811 - val_accuracy: 0.4392\n"]}]},{"cell_type":"markdown","metadata":{"id":"uj5qSfeR1sQ-"},"source":["### Evaluation of Model: Accuracy, ROC Curve, and AUC"]},{"cell_type":"markdown","metadata":{"id":"rRjMyh-68IOB"},"source":["Let's evaluate the accuracy of FC model, and plot the accuracy curve during training :"]},{"cell_type":"code","metadata":{"id":"eyA2zQcVKnZE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1638783095290,"user_tz":-60,"elapsed":770,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"718d496b-122e-44a4-8f2c-7eb3bfb7f1be"},"source":["modelfc.evaluate(validation_generator)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["8/8 [==============================] - 1s 83ms/step - loss: 8.3811 - accuracy: 0.4392\n"]},{"output_type":"execute_result","data":{"text/plain":["[8.381070137023926, 0.43918919563293457]"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"W6gCmPjvoqs2"},"source":["Now, let's plot the accuracy curve of train and valid data, and see their learning trend will be."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h7yCuv_yRxFv","executionInfo":{"status":"ok","timestamp":1638783095847,"user_tz":-60,"elapsed":559,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"3442a678-3f92-44f8-e0af-44f52fff0ca1"},"source":["plt.plot(history.history['accuracy'])\n","plt.plot(history.history['val_accuracy'])\n","#plt.plot(history.history['loss'])\n","#plt.plot(history.history['val_loss'])\n","plt.title(\"FC Model accuracy\")\n","plt.ylabel(\"Accuracy\")\n","plt.xlabel(\"Epoch\")\n","plt.legend([\"Train Accuracy\",\"Valid Accuracy\",\"Train loss\",\"Valid Loss\"])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f7610127b50>"]},"metadata":{},"execution_count":16},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"27R_di_J9mA9"},"source":["Now, let's calculate our ROC curve and plot it.\n","\n","First, let's make predictions on our validation set. When using generators to make predictions, we must first turn off shuffle (as we did when we created validation_generator) and reset the generator:"]},{"cell_type":"code","metadata":{"id":"6fEJj5BGC0qu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1638783096490,"user_tz":-60,"elapsed":646,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"009f45df-de03-4280-bdc2-d2ae05726d61"},"source":["STEP_SIZE_TEST=validation_generator.n//validation_generator.batch_size\n","validation_generator.reset()  #it's necessary, to make prediction start with the first batch. Because the index is on the end of queue due to fit function\n","preds = modelfc.predict(validation_generator,verbose=1)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["8/8 [==============================] - 1s 82ms/step\n"]}]},{"cell_type":"markdown","metadata":{"id":"G0WNZ8b6-Aq9"},"source":["To create the ROC curve and AUC, we'll need to compute the false-positive rate and the true-positive rate:"]},{"cell_type":"code","metadata":{"id":"oQ1J0M3qVTO8"},"source":["fpr, tpr, _ = roc_curve(validation_generator.classes, preds)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"IQ-bqubEWDF5"},"source":["roc_auc = auc(fpr, tpr)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"F8cJa7m0WJyy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1638783096816,"user_tz":-60,"elapsed":327,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"b0a3fc88-c906-42a7-a97b-8b2c136d4288"},"source":["plt.figure()\n","lw = 2\n","plt.plot(fpr, tpr, color='darkorange',\n","         lw=lw, label='ROC curve (area = %0.2f)' % roc_auc)\n","plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic')\n","plt.legend(loc=\"lower right\")\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"Rx9o0PJR-SEm"},"source":["The ROC curve is a probability curve plotting the true-positive rate (TPR) against the false-positive rate (FPR). In this curve, the diagonal line is the curve for random guessing, e.g. coin flipping, so the ROC curve above shows that our model does better than chance at classifying between dandelions and grass. Not bad!\n","\n","Similarly, the AUC (area under curve), as shown in the legend above, measures how much our model is capable of distinguishing between our two classes, dandelions and grass. The higher the AUC, the better our model is at classification. It is also used to compare different models, which I will do in future tutorials when I present how to build an image classifier using Convolutional Neural Networks and transfer learning with ResNet!"]},{"cell_type":"markdown","metadata":{"id":"o6vSHzPR2ghH"},"source":["### Making Predictions on specific Files\n","\n","Now, let's use the model to make predictions! Upload an image to see if it's a dandelion or grass."]},{"cell_type":"code","metadata":{"id":"DoWp43WxJDNT","colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":39},"executionInfo":{"status":"ok","timestamp":1638787496216,"user_tz":-60,"elapsed":4399405,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"30683b11-b144-4611-f687-c67d19389e04"},"source":["%matplotlib inline\n","import matplotlib.pyplot as plt\n","import numpy as np\n","from google.colab import files\n","from keras.preprocessing import image\n","\n","uploaded = files.upload()\n","\n","for fn in uploaded.keys():\n","\n","  # predicting images\n","  path = '/content/' + fn\n","  img = image.load_img(path, target_size=(200, 200))\n","  x = image.img_to_array(img)\n","  plt.imshow(x/255.)\n","  x = np.expand_dims(x, axis=0)\n","  images = np.vstack([x])\n","  classes = modelfc.predict(images, batch_size=10)\n","  print(classes[0])\n","  if classes[0]<0.5:\n","    print(fn + \" is a dandelion\")\n","  else:\n","    print(fn + \" is a grass\")\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-de04e388-a38f-4918-a127-e8dccdd00e22\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-de04e388-a38f-4918-a127-e8dccdd00e22\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"OB0BsCMXtkQ-"},"source":["## Building the CNN Model from Scratch\n","**Tips:**\n","\n","- First, add the first layer as conv2d of 16 filters of 3x3 size, and activation relu\n","-  Second layer: MaxPooling2D layer\n","- repeat this block of layers, increasing number of filters (32, 64), following each time by a MaxPooling2D layer\n","- add a flatten layer to prepare 2D feature maps to be ready for FC layer\n","- add a Dense layer with 512 units\n","- Finally, add a Dense layer with **x units ???**\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"osBKw9vU6rHr"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vwLfQqLKSJNt"},"source":["modelcnn = tf.keras.models.Sequential([\n","# Note the input shape is the desired size of the image 200x200 with 3 bytes color\n","# This is the first convolution\n","tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(200, 200, 3)),\n","tf.keras.layers.MaxPooling2D(2, 2),\n","# The second convolution\n","tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n","tf.keras.layers.MaxPooling2D(2,2),\n","# The third convolution\n","tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n","tf.keras.layers.MaxPooling2D(2,2),\n","# The fourth convolution\n","tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n","tf.keras.layers.MaxPooling2D(2,2),\n","# # The fifth convolution\n","tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n","tf.keras.layers.MaxPooling2D(2,2),\n","# Flatten the results to feed into a DNN\n","tf.keras.layers.Flatten(),\n","# 512 neuron hidden layer\n","tf.keras.layers.Dense(512, activation='relu'),\n","# Only 1 output neuron. It will contain a value from 0-1 where 0 for 1 class ('dandelions') and 1 for the other ('grass')\n","tf.keras.layers.Dense(?, activation='sigmoid')])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fMNQF764SwNX"},"source":["modelcnn.compile(loss='binary_crossentropy',\n","optimizer=tf.keras.optimizers.RMSprop(learning_rate=0.001),\n","metrics='accuracy')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rz4pC_VjTG4K","executionInfo":{"status":"ok","timestamp":1638787571038,"user_tz":-60,"elapsed":74527,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"e5926450-e994-4016-b513-4cefb1902e6c"},"source":["history = modelcnn.fit(train_generator,\n","steps_per_epoch=8,\n","epochs=15,\n","verbose=1,\n","validation_data = validation_generator,\n","validation_steps=8)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/15\n","8/8 [==============================] - 14s 555ms/step - loss: 0.7877 - accuracy: 0.5028 - val_loss: 0.6279 - val_accuracy: 0.6216\n","Epoch 2/15\n","8/8 [==============================] - 3s 401ms/step - loss: 0.6749 - accuracy: 0.6382 - val_loss: 0.5752 - val_accuracy: 0.6959\n","Epoch 3/15\n","8/8 [==============================] - 3s 400ms/step - loss: 0.6572 - accuracy: 0.6371 - val_loss: 0.5970 - val_accuracy: 0.7230\n","Epoch 4/15\n","8/8 [==============================] - 3s 368ms/step - loss: 0.6165 - accuracy: 0.6519 - val_loss: 0.6248 - val_accuracy: 0.7162\n","Epoch 5/15\n","8/8 [==============================] - 3s 366ms/step - loss: 0.5653 - accuracy: 0.7144 - val_loss: 0.5718 - val_accuracy: 0.6892\n","Epoch 6/15\n","8/8 [==============================] - 3s 367ms/step - loss: 0.4996 - accuracy: 0.7770 - val_loss: 0.4994 - val_accuracy: 0.7905\n","Epoch 7/15\n","8/8 [==============================] - 3s 371ms/step - loss: 0.5668 - accuracy: 0.7190 - val_loss: 0.5666 - val_accuracy: 0.7297\n","Epoch 8/15\n","8/8 [==============================] - 3s 372ms/step - loss: 0.4918 - accuracy: 0.7759 - val_loss: 0.4948 - val_accuracy: 0.7703\n","Epoch 9/15\n","8/8 [==============================] - 3s 366ms/step - loss: 0.4560 - accuracy: 0.7816 - val_loss: 0.6986 - val_accuracy: 0.5270\n","Epoch 10/15\n","8/8 [==============================] - 3s 376ms/step - loss: 0.4043 - accuracy: 0.8055 - val_loss: 0.5486 - val_accuracy: 0.7095\n","Epoch 11/15\n","8/8 [==============================] - 3s 370ms/step - loss: 0.5101 - accuracy: 0.7838 - val_loss: 0.5262 - val_accuracy: 0.7432\n","Epoch 12/15\n","8/8 [==============================] - 3s 374ms/step - loss: 0.4166 - accuracy: 0.8077 - val_loss: 0.4931 - val_accuracy: 0.7500\n","Epoch 13/15\n","8/8 [==============================] - 3s 373ms/step - loss: 0.4144 - accuracy: 0.8134 - val_loss: 0.4819 - val_accuracy: 0.7973\n","Epoch 14/15\n","8/8 [==============================] - 3s 385ms/step - loss: 0.4191 - accuracy: 0.8062 - val_loss: 0.5317 - val_accuracy: 0.7500\n","Epoch 15/15\n","8/8 [==============================] - 3s 368ms/step - loss: 0.3642 - accuracy: 0.8396 - val_loss: 0.6287 - val_accuracy: 0.6757\n"]}]},{"cell_type":"markdown","metadata":{"id":"RVTeVC1EqDXZ"},"source":["### Evaluation of Model: Accuracy, ROC Curve, and AUC\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1zrDcEUY2WGC","executionInfo":{"status":"ok","timestamp":1638787571656,"user_tz":-60,"elapsed":639,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"d54186f5-89c5-4c8c-f66b-ab1ddd4bf625"},"source":["modelcnn.evaluate(validation_generator)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["8/8 [==============================] - 1s 85ms/step - loss: 0.6287 - accuracy: 0.6757\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.6287376880645752, 0.6756756901741028]"]},"metadata":{},"execution_count":25}]},{"cell_type":"markdown","metadata":{"id":"2yO5HoJsiHIb"},"source":["**Exercise**\n","\n","Plot the oart of loss curve for train and validation data"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sk15b0cIUu2T","executionInfo":{"status":"ok","timestamp":1638787572205,"user_tz":-60,"elapsed":383,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"dd9c0eaa-b355-41f6-904a-632c5017aad2"},"source":["plt.plot(history.history['accuracy'])\n","plt.plot(history.history['val_accuracy'])\n","plt.plot(history.history['loss'])\n","plt.plot(history.history['val_loss'])\n","plt.title(\"CNN Model accuracy\")\n","plt.ylabel(\"Accuracy\")\n","plt.xlabel(\"Epoch\")\n","plt.legend([\"Train Accuracy\",\"Valid Accuracy\",\"Train loss\",\"Valid Loss\"])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f7526b3df90>"]},"metadata":{},"execution_count":26},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hkozMBIEZbOg","executionInfo":{"status":"ok","timestamp":1638787573615,"user_tz":-60,"elapsed":1414,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"46aefc26-8493-4838-c5c7-30f4fb16c2d9"},"source":["STEP_SIZE_TEST=validation_generator.n//validation_generator.batch_size\n","validation_generator.reset()\n","preds2 = modelcnn.predict(validation_generator,\n","                      verbose=1)\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["8/8 [==============================] - 1s 83ms/step\n"]}]},{"cell_type":"code","metadata":{"id":"IrbCdUZDZrJO"},"source":["fpr_cnn, tpr_cnn, _ = roc_curve(validation_generator.classes, preds2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LzxquEHSZxLU"},"source":["roc_auc_cnn = auc(fpr_cnn, tpr_cnn)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ej1FIyEkZyoH","executionInfo":{"status":"ok","timestamp":1638787573957,"user_tz":-60,"elapsed":345,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"d7ee9bf1-6af5-45c3-96b4-271987fed87f"},"source":["plt.figure()\n","lw = 2\n","plt.plot(fpr_cnn, tpr_cnn, color='darkorange',\n","         lw=lw, label='CNN ROC curve (area = %0.2f)' % roc_auc_cnn)\n","plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic')\n","plt.legend(loc=\"lower right\")\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"lcyEGx6tuRyH"},"source":["### Making Predictions on specific Files\n","\n","Now, let's use the model to make predictions! Upload an image to see if it's a dandelion or grass."]},{"cell_type":"code","metadata":{"colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":39},"id":"wzCQCDNSZ2VK","executionInfo":{"status":"ok","timestamp":1638787906737,"user_tz":-60,"elapsed":332785,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"09b1984c-1afc-428e-ad8a-1d184613f87c"},"source":["%matplotlib inline\n","import matplotlib.pyplot as plt\n","import numpy as np\n","from google.colab import files\n","from keras.preprocessing import image\n","\n","uploaded = files.upload()\n","\n","for fn in uploaded.keys():\n","\n","  # predicting images\n","  path = '/content/' + fn\n","  img = image.load_img(path, target_size=(200, 200))\n","  x = image.img_to_array(img)\n","  plt.imshow(x/255.)\n","  x = np.expand_dims(x, axis=0)\n","  images = np.vstack([x])\n","  classes = modelcnn.predict(images, batch_size=10)\n","  print(classes[0])\n","  if classes[0]<0.5:\n","    print(fn + \" is a dandelion\")\n","  else:\n","    print(fn + \" is a grass\")\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-54f61296-ae1d-44bc-9d41-8e32db6ef577\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-54f61296-ae1d-44bc-9d41-8e32db6ef577\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"iQQAp968umGs"},"source":["### **Compare two Models**\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LqQ2DB87vGBu","executionInfo":{"status":"ok","timestamp":1638787907115,"user_tz":-60,"elapsed":382,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"94202f70-159c-4855-88ea-b91a5d1e9897"},"source":["plt.figure()\n","lw = 2\n","plt.plot(fpr, tpr, color='darkred',\n","         lw=lw, label='FC-NN ROC curve (area = %0.2f)' % roc_auc)\n","plt.plot(fpr_cnn, tpr_cnn, color='darkorange',\n","         lw=lw, label='CNN ROC curve (area = %0.2f)' % roc_auc_cnn)\n","plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic')\n","plt.legend(loc=\"lower right\")\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"sEL2VhitzYxi"},"source":["\n","\n","\n","## **Transfer Learning**"]},{"cell_type":"markdown","metadata":{"id":"tQ3zBzavzy_h"},"source":["**MobileNet-v2** is a convolutional neural network that is 53 deep layers . You can load a pretrained version of the network trained on more than a million images from the ImageNet database. The pretrained network can classify images into 1000 object categories, such as keyboard, mouse, pencil, and many animals.\n","\n","As a result, the network has learned rich feature representations for a wide range of images. The network has an image input size of 224-by-224. For more pretrained networks, for Image Classification, those are the top 4 pre-trained - Models\n","- VGG-16\n","- ResNet50\n","- Inceptionv3\n","- EfficientNet\n","\n"]},{"cell_type":"code","metadata":{"id":"k7NIX8X5zzSp"},"source":["\n","\n","#import tensorflow as tf\n","from tensorflow.keras.applications import ResNet50V2\n","from tensorflow.keras.applications import MobileNetV2\n","from tensorflow.keras.models import Sequential\n","#from tensorflow.keras.layers import Flatten\n","from tensorflow.keras.layers import Dense\n","#import numpy as np\n","#from itertools import cycle\n","\n","from sklearn import svm, datasets\n","from sklearn.metrics import roc_curve, auc\n","from sklearn.metrics import roc_auc_score\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import label_binarize\n","from sklearn.multiclass import OneVsRestClassifier\n","from scipy import interp\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TRbhUeml0NX6","executionInfo":{"status":"ok","timestamp":1638872311439,"user_tz":-60,"elapsed":2168,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"2dd4dcff-dd91-461f-dbe4-37fe88dbebba"},"source":["model_tl = Sequential()\n","model_tl.add(MobileNetV2(include_top = False, weights=\"imagenet\", input_shape=(?, ?, 3)))\n","model_tl.add(tf.keras.layers.GlobalAveragePooling2D())\n","model_tl.add(Dense(1, activation = 'sigmoid'))\n","model_tl.layers[0].trainable = False"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["WARNING:tensorflow:`input_shape` is undefined or non-square, or `rows` is not in [96, 128, 160, 192, 224]. Weights for input shape (224, 224) will be loaded as the default.\n"]}]},{"cell_type":"markdown","source":["**Note** that when loading the basic model, the “**include_top**” argument can be set to False, in this case the fully-connected output layers of the model used to make predictions is not loaded, allowing a new output layer to be added and trained.\n","\n","Additionally, when the “**include_top**” argument is False, the “input_tensor” argument can be changed to specify a new input shape, as in our case 200, where the originl model has 224, that allowing the expected fixed-sized input of the model to be changed"],"metadata":{"id":"lArLTwsFe0Hx"}},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"As7TijdQ0UI7","executionInfo":{"status":"ok","timestamp":1638787908962,"user_tz":-60,"elapsed":9,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"557343b6-e705-4703-e362-978727469534"},"source":["model_tl.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," mobilenetv2_1.00_224 (Funct  (None, 7, 7, 1280)       2257984   \n"," ional)                                                          \n","                                                                 \n"," global_average_pooling2d (G  (None, 1280)             0         \n"," lobalAveragePooling2D)                                          \n","                                                                 \n"," dense_4 (Dense)             (None, 1)                 1281      \n","                                                                 \n","=================================================================\n","Total params: 2,259,265\n","Trainable params: 1,281\n","Non-trainable params: 2,257,984\n","_________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BK4coCWH0cFQ","executionInfo":{"status":"ok","timestamp":1638872372968,"user_tz":-60,"elapsed":312,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"9faade79-af02-4a89-99f0-8bc41f1bb5aa"},"source":["from tensorflow.keras.optimizers import RMSprop\n","#from tensorflow.keras import optimizers\n","\n","\n","model_tl.compile(optimizer=RMSprop(lr=0.01), loss = 'binary_crossentropy', metrics = 'accuracy')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/rmsprop.py:130: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super(RMSprop, self).__init__(name, **kwargs)\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hY4_uPSu0zvN","executionInfo":{"status":"ok","timestamp":1638872616932,"user_tz":-60,"elapsed":78757,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"704f5184-0b12-4210-ea9f-9839453c254b"},"source":["history = model_tl.fit(\n","      train_generator,\n","      steps_per_epoch=8,\n","      epochs=15,\n","      verbose=1,\n","      validation_data = validation_generator,\n","      validation_steps=8)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/15\n","8/8 [==============================] - 17s 689ms/step - loss: 0.9275 - accuracy: 0.7349 - val_loss: 0.3457 - val_accuracy: 0.8649\n","Epoch 2/15\n","8/8 [==============================] - 3s 390ms/step - loss: 0.2121 - accuracy: 0.9078 - val_loss: 0.4368 - val_accuracy: 0.8378\n","Epoch 3/15\n","8/8 [==============================] - 3s 391ms/step - loss: 0.3136 - accuracy: 0.8714 - val_loss: 0.2649 - val_accuracy: 0.8919\n","Epoch 4/15\n","8/8 [==============================] - 3s 383ms/step - loss: 0.1242 - accuracy: 0.9499 - val_loss: 0.5663 - val_accuracy: 0.8108\n","Epoch 5/15\n","8/8 [==============================] - 3s 399ms/step - loss: 0.1630 - accuracy: 0.9333 - val_loss: 0.2498 - val_accuracy: 0.8986\n","Epoch 6/15\n","8/8 [==============================] - 3s 388ms/step - loss: 0.1564 - accuracy: 0.9340 - val_loss: 0.2189 - val_accuracy: 0.8986\n","Epoch 7/15\n","8/8 [==============================] - 3s 382ms/step - loss: 0.3078 - accuracy: 0.8851 - val_loss: 0.2541 - val_accuracy: 0.9122\n","Epoch 8/15\n","8/8 [==============================] - 3s 385ms/step - loss: 0.0553 - accuracy: 0.9818 - val_loss: 0.2212 - val_accuracy: 0.9054\n","Epoch 9/15\n","8/8 [==============================] - 3s 385ms/step - loss: 0.0560 - accuracy: 0.9818 - val_loss: 0.2699 - val_accuracy: 0.9257\n","Epoch 10/15\n","8/8 [==============================] - 3s 389ms/step - loss: 0.1864 - accuracy: 0.9408 - val_loss: 0.2773 - val_accuracy: 0.8919\n","Epoch 11/15\n","8/8 [==============================] - 3s 387ms/step - loss: 0.0563 - accuracy: 0.9784 - val_loss: 0.2568 - val_accuracy: 0.8784\n","Epoch 12/15\n","8/8 [==============================] - 3s 389ms/step - loss: 0.0450 - accuracy: 0.9863 - val_loss: 0.3237 - val_accuracy: 0.8851\n","Epoch 13/15\n","8/8 [==============================] - 3s 411ms/step - loss: 0.0723 - accuracy: 0.9750 - val_loss: 0.2886 - val_accuracy: 0.8986\n","Epoch 14/15\n","8/8 [==============================] - 3s 376ms/step - loss: 0.0612 - accuracy: 0.9795 - val_loss: 0.3778 - val_accuracy: 0.8851\n","Epoch 15/15\n","8/8 [==============================] - 3s 391ms/step - loss: 0.1425 - accuracy: 0.9477 - val_loss: 0.2547 - val_accuracy: 0.9054\n"]}]},{"cell_type":"markdown","metadata":{"id":"tmZasKbI3T5_"},"source":[]},{"cell_type":"markdown","metadata":{"id":"Xw9W6zX13eR6"},"source":["### Evaluation of Model: Accuracy, ROC Curve, and AUC"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mUEqMRtc3Sy1","executionInfo":{"status":"ok","timestamp":1638872851379,"user_tz":-60,"elapsed":1103,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"0969593f-e8c1-49b6-e397-d8c7c7d9abbb"},"source":["model_tl.evaluate(validation_generator)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["8/8 [==============================] - 1s 99ms/step - loss: 0.2547 - accuracy: 0.9054\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.25469595193862915, 0.9054054021835327]"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":312},"id":"0C4RiLxr3wZv","executionInfo":{"status":"ok","timestamp":1638872902491,"user_tz":-60,"elapsed":1247,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"f480801d-0f42-4d66-b779-795fd9799656"},"source":["plt.plot(history.history['accuracy'])\n","plt.plot(history.history['val_accuracy'])\n","plt.plot(history.history['loss'])\n","plt.plot(history.history['val_loss'])\n","plt.title(\"TL Model accuracy\")\n","plt.ylabel(\"Accuracy\")\n","plt.xlabel(\"Epoch\")\n","plt.legend([\"Train Accuracy\",\"Valid Accuracy\",\"Train loss\",\"Valid Loss\"])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f57010c87d0>"]},"metadata":{},"execution_count":19},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G5TlJP7e3_Gk","executionInfo":{"status":"ok","timestamp":1638872916349,"user_tz":-60,"elapsed":2171,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"1daa2ee9-117a-4f9e-9c55-02cbc9d676d6"},"source":["STEP_SIZE_TEST=validation_generator.n//validation_generator.batch_size\n","validation_generator.reset()\n","preds3 = model_tl.predict(validation_generator,\n","                      verbose=1)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["8/8 [==============================] - 2s 98ms/step\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JjF4MWAOY1f5","executionInfo":{"status":"ok","timestamp":1638788228858,"user_tz":-60,"elapsed":1142,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"f427f170-dbdb-4f48-a5d7-55f3e4dcb94d"},"source":["model_tl.evaluate(validation_generator,\n","                      verbose=1)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["8/8 [==============================] - 1s 101ms/step - loss: 0.2172 - accuracy: 0.9257\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.21717491745948792, 0.9256756901741028]"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","metadata":{"id":"TLHphNHP32cO"},"source":["fpr_tl, tpr_tl, _ = roc_curve(validation_generator.classes, preds3)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZWcku8ni4MkW"},"source":["roc_auc_tl = auc(fpr_tl, tpr_tl)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"dfDPNiPb4UEH","executionInfo":{"status":"ok","timestamp":1638872951567,"user_tz":-60,"elapsed":700,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"79614adc-1ddb-4c01-d7db-1c5ff86046c8"},"source":["plt.figure()\n","lw = 2\n","plt.plot(fpr_tl, tpr_tl, color='darkorange',\n","         lw=lw, label='CNN+TL ROC curve (area = %0.2f)' % roc_auc_tl)\n","plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic')\n","plt.legend(loc=\"lower right\")\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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ISFr94OXAgICaNq0KXv37gVg0qRJ9O3bl8aNGwMQHh7Oyy+/zJgxYwB48cUXGTduHJdffjkAwcHB3H///ect98CBA9x00000aNCABg0asHLlSnbv3k3dumdvOB03bhzPPvssAG3btmXw4MFEREQwevRoKleuTFJSEgCnTp2iYsWKxMfH8/vvv9OlSxeaNGlCq1at2LZt23nr3rFjB8HBwYSHhwPwxRdf0KxZMxo1akSHDh04cOAAAM8++yx9+vShRYsW9OnTh0OHDtGzZ0+uvvpqrr76an744QcAfvrpJ6655hoaNWrEtddey/bt2y95v3/++efcfffdANx999189tln55XZsmULrVu3JjAwkMKFC1O/fn0WLVoEOO0Nx48fByA6Ojrl/1GoUCGqVKnCTz/9dMkxeiPft1EcPHiKoUOX8M47GwEYP/5HWreu7OeoTE7z66+/0qRJkwzLDBs2jOuvv5577rnnvGmVKlWiZcuWvPvuu9xwww2+CjNdsbGxrF69mgkTJgCwefPmlANYsoiICDZv3gx4t70ADz/8MG3atGHu3LkkJiZy8uTJdKtXkp05cyalymz9+vV8++23tGvXjvnz59O5c2eCgoLo168fU6dOpXr16qxevZoBAwbwzTffnLOcH374ISXRAbRs2ZJVq1YhIsycOZOXX36ZV155BXAOxt9//z2hoaHcfvvtPProo7Rs2ZK//vqLzp07s3XrVmrWrMl3331HYGAgS5cu5YknnuDTTz89Z50nTpxI+XGQ2vvvv0/t2rXPGXfgwAHKlSsHwGWXXZaSvDw1aNCA//znPzz22GPExMSwbNmylOXMnDmTrl27EhoaSrFixVi1alXKfBEREXz33Xc0bdo0w/2dFfJtokhKUt54Yz3Dhi3l2LFYgoMDePLJ1gwdeq2/QzPeeEz9HcF5rrjiCpo1a8b777+f5vQRI0bQo0cPIiMjU8YdOXKE9u3bA0599pkzZ1J+db777rvUq1fvkmL6/fffadiwIbt27SIyMpL69etf0vJS++abb3jnnXcA56ylePHimSaKXr16nfP+o48+ol27dnz44YcMGDCAkydPsnLlSm699daUcsntO5727dtH6dKlU4ajoqLo1asX+/bt48yZM+fcR9C9e3dCQ50eE5YuXcqWLVtSph0/fpyTJ08SHR3N3XffzW+//YaInNOek6xo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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"xZ0ULJqcEVAz"},"source":["## Assignment 1\n","Try to transfer learning from ResNet50, MobileNetV2 networks to perform the same task of classification\n","\n","- compare between the three architectures, showing the performances, and the complexity\n","- Which model would you choose for your system ? argument you choice"]},{"cell_type":"code","metadata":{"id":"-f2wnn3cZZJx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1638873932791,"user_tz":-60,"elapsed":3673,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"235b3d68-2b89-42c0-997f-dc3273293f76"},"source":["model_tl2 = Sequential()\n",".....\n","\n","model_tl2.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50v2_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94674944/94668760 [==============================] - 1s 0us/step\n","94683136/94668760 [==============================] - 1s 0us/step\n","Model: \"sequential_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," resnet50v2 (Functional)     (None, 7, 7, 2048)        23564800  \n","                                                                 \n"," global_average_pooling2d_1   (None, 2048)             0         \n"," (GlobalAveragePooling2D)                                        \n","                                                                 \n"," dense_1 (Dense)             (None, 1)                 2049      \n","                                                                 \n","=================================================================\n","Total params: 23,566,849\n","Trainable params: 2,049\n","Non-trainable params: 23,564,800\n","_________________________________________________________________\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/rmsprop.py:130: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super(RMSprop, self).__init__(name, **kwargs)\n"]}]},{"cell_type":"markdown","metadata":{"id":"AXGWewtRZknj"},"source":["### Training 2nd Model of transfer learning ResNet50"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sgSN8_bvZv9Y","executionInfo":{"status":"ok","timestamp":1638789519524,"user_tz":-60,"elapsed":132630,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"9f3c70a5-92ad-432d-a92c-bb47b3728ce2"},"source":[],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/15\n","8/8 [==============================] - 16s 2s/step - loss: 0.6420 - accuracy: 0.7941 - val_loss: 0.1818 - val_accuracy: 0.9392\n","Epoch 2/15\n","8/8 [==============================] - 7s 831ms/step - loss: 0.2266 - accuracy: 0.9192 - val_loss: 0.1553 - val_accuracy: 0.9189\n","Epoch 3/15\n","8/8 [==============================] - 7s 890ms/step - loss: 0.1114 - accuracy: 0.9563 - val_loss: 0.1272 - val_accuracy: 0.9324\n","Epoch 4/15\n","8/8 [==============================] - 7s 833ms/step - loss: 0.0980 - accuracy: 0.9602 - val_loss: 0.1579 - val_accuracy: 0.9324\n","Epoch 5/15\n","8/8 [==============================] - 7s 832ms/step - loss: 0.0984 - accuracy: 0.9579 - val_loss: 0.1213 - val_accuracy: 0.9527\n","Epoch 6/15\n","8/8 [==============================] - 7s 846ms/step - loss: 0.0567 - accuracy: 0.9852 - val_loss: 0.2164 - val_accuracy: 0.8986\n","Epoch 7/15\n","8/8 [==============================] - 7s 833ms/step - loss: 0.0623 - accuracy: 0.9818 - val_loss: 0.1864 - val_accuracy: 0.9122\n","Epoch 8/15\n","8/8 [==============================] - 7s 835ms/step - loss: 0.0510 - accuracy: 0.9886 - val_loss: 0.4211 - val_accuracy: 0.8446\n","Epoch 9/15\n","8/8 [==============================] - 7s 844ms/step - loss: 0.0719 - accuracy: 0.9704 - val_loss: 0.2923 - val_accuracy: 0.8851\n","Epoch 10/15\n","8/8 [==============================] - 7s 831ms/step - loss: 0.0181 - accuracy: 0.9989 - val_loss: 0.1596 - val_accuracy: 0.9324\n","Epoch 11/15\n","8/8 [==============================] - 7s 844ms/step - loss: 0.0189 - accuracy: 0.9966 - val_loss: 0.1922 - val_accuracy: 0.9257\n","Epoch 12/15\n","8/8 [==============================] - 7s 840ms/step - loss: 0.0132 - accuracy: 0.9977 - val_loss: 0.1744 - val_accuracy: 0.9324\n","Epoch 13/15\n","8/8 [==============================] - 7s 833ms/step - loss: 0.0925 - accuracy: 0.9625 - val_loss: 0.1650 - val_accuracy: 0.9324\n","Epoch 14/15\n","8/8 [==============================] - 7s 891ms/step - loss: 0.0094 - accuracy: 1.0000 - val_loss: 0.2008 - val_accuracy: 0.9189\n","Epoch 15/15\n","8/8 [==============================] - 7s 893ms/step - loss: 0.0070 - accuracy: 1.0000 - val_loss: 0.2279 - val_accuracy: 0.9189\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8mV1z3bwZ5lR","executionInfo":{"status":"ok","timestamp":1638789797207,"user_tz":-60,"elapsed":2850,"user":{"displayName":"Yasser ALMEHIO","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gij0wzGqMNjD5sCRLAXEatSpiC6bdV_bpGmoAtxFQ=s64","userId":"17884573495595278135"}},"outputId":"07ebb8b0-40ae-445b-8262-136a4177c567"},"source":[],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["8/8 [==============================] - 1s 174ms/step - loss: 0.2279 - accuracy: 0.9189\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.22794918715953827, 0.9189189076423645]"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","metadata":{"id":"ev6n8YvXaLpt"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"95gMFF17aCQF"},"source":["STEP_SIZE_TEST=validation_generator.n//validation_generator.batch_size\n","validation_generator.reset()\n","preds4 = model_tl2.predict(validation_generator,\n","                      verbose=1)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_TQQK5uv4Z2o"},"source":["### Assignment 2: **Compare the performances o three Models**\n","\n","- Now, you have to compare between three models: FC-NN, CNN, TL(winning one)\n","- show your interpretation of results and justify your choice  "]},{"cell_type":"markdown","metadata":{"id":"7psK0kU6jsLi"},"source":["\n","* share me your notebook via my address mymehio@gmail.com\n","Deadline: 23/02/2024 11:59 pm (don't touch after this time)\n"]},{"cell_type":"markdown","metadata":{"id":"roAu2BO-i5Vm"},"source":["## Clean Up\n","Run the following cell to terminate the kernel and free memory resources:"]},{"cell_type":"code","metadata":{"id":"L6vPxGyfjH80"},"source":["import os, signal\n","os.kill(os.getpid(), signal.SIGKILL)"],"execution_count":null,"outputs":[]}]}